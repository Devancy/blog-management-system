@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized Context="authContext">
        <MudMenu Icon="@Icons.Material.Outlined.PersonOutline" 
                Color="Color.Inherit" 
                AnchorOrigin="Origin.BottomRight" 
                TransformOrigin="Origin.TopRight">
            <MudText Typo="Typo.body2" Class="px-4 py-2">
                Hello, @GetUserDisplayName(authContext.User)
            </MudText>
            <MudText Typo="Typo.caption" Class="px-4 pb-2 pt-0">
                Organization: @GetUserOrganization(authContext.User)
            </MudText>
            <MudDivider />
            <MudMenuItem Href="/Account/Profile" Icon="@Icons.Material.Filled.AccountCircle">Profile</MudMenuItem>
            <MudMenuItem OnClick="@Logout" Icon="@Icons.Material.Filled.Logout">Logout</MudMenuItem>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudIconButton Icon="@Icons.Material.Rounded.Login" Color="Color.Inherit" OnClick="@Login" />
    </NotAuthorized>
</AuthorizeView>

@code {
    private void Login()
    {
        NavigationManager.NavigateTo("Account/Login", true);
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("Account/Logout", true);
    }
    
    private string GetUserDisplayName(ClaimsPrincipal user)
    {
        // Try to get name from claims in order of preference
        var name = user.FindFirstValue(ClaimTypes.Name) ?? 
                  user.FindFirstValue("name") ??
                  user.FindFirstValue("preferred_username") ??
                  user.Identity?.Name;
        
        // If no name found, show the email
        if (string.IsNullOrEmpty(name))
        {
            name = user.FindFirstValue(ClaimTypes.Email) ??
                  user.FindFirstValue("email");
        }
        
        // If still no identifier found, return User as fallback
        return string.IsNullOrEmpty(name) ? "User" : name;
    }
    
    private string GetUserOrganization(ClaimsPrincipal user)
    {
        var name = user.FindFirstValue("organization");
        
        return string.IsNullOrEmpty(name) ? "N/A" : name;
    }
}