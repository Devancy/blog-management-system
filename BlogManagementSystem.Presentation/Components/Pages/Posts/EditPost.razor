@page "/posts/edit/{Id:guid}"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@using BlogManagementSystem.Application.DTOs
@using BlogManagementSystem.Application.Common.Security
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize(Roles = "Admin,Author")]
@rendermode InteractiveServer

<PageTitle>Edit Post</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
    }
    else if (_post == null)
    {
        <MudAlert Severity="Severity.Error">Post not found or you don't have permission to edit it.</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoBack" Class="mt-4">Back to Posts</MudButton>
    }
    else
    {
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h4" GutterBottom="true">Edit Post</MudText>
            <MudChip T="string" Color="@GetStatusColor(_post.Status)" Size="Size.Medium" Class="mb-4">@_post.Status.ToString()</MudChip>
            
            <MudForm @ref="_form" @bind-IsValid="_isValid">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_title" Label="Title" 
                                    Required="true" RequiredError="Title is required"
                                    Counter="200" MaxLength="200" 
                                    OnBlur="@(_ => GenerateSlug(_title))" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_slug" Label="Slug" 
                                    Required="true" RequiredError="Slug is required"
                                    Counter="200" MaxLength="200"
                                    HelperText="URL-friendly name" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_content" Label="Content" 
                                    Required="true" RequiredError="Content is required"
                                    Lines="15" Counter="50000" MaxLength="50000" />
                    </MudItem>
                    
                    <MudItem xs="12" Class="d-flex justify-space-between">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                                  OnClick="GoBack">Cancel</MudButton>
                        
                        <div>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                     OnClick="SaveChanges" Class="mr-2"
                                     Disabled="@(!_isValid || _isSaving)">
                                Save Changes
                            </MudButton>
                            
                            @if (_post.Status == PostStatus.Draft)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Success" 
                                         OnClick="SaveAndSubmit"
                                         Disabled="@(!_isValid || _isSaving)">
                                    Save & Submit
                                </MudButton>
                            }
                        </div>
                    </MudItem>
                </MudGrid>
            </MudForm>
            
            @if (_isSaving)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-3" />
            }
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private PostDto? _post;
    private string _title = string.Empty;
    private string _slug = string.Empty;
    private string _content = string.Empty;
    private bool _isValid;
    private bool _isLoading = true;
    private bool _isSaving;
    private MudForm? _form;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPostAsync();
    }
    
    private async Task LoadPostAsync()
    {
        try
        {
            _isLoading = true;
            
            _post = await PostService.GetPostDtoAsync(Id, CancellationToken.None);
            if (_post != null)
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                
                if (!RolePermissions.CanEditPost(_post, user))
                {
                    _post = null; // No permission
                    return;
                }
                
                // Populate form
                _title = _post.Title;
                _slug = _post.Slug;
                _content = _post.Content;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading post: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("/posts");
    }
    
    private void GenerateSlug(string title)
    {
        if (string.IsNullOrEmpty(title))
        {
            return;
        }
        
        // Only generate slug if it's empty or unchanged from the original title
        if (string.IsNullOrEmpty(_slug) || _post?.Title == _post?.Slug)
        {
            string slug = title.ToLowerInvariant();
            
            slug = slug.Replace(" ", "-");
            
            // Remove special characters
            slug = System.Text.RegularExpressions.Regex.Replace(slug, @"[^a-z0-9\-]", "");
            
            // Remove multiple hyphens
            slug = System.Text.RegularExpressions.Regex.Replace(slug, @"-+", "-");
            
            slug = slug.Trim('-');
            
            _slug = slug;
        }
    }
    
    private async Task SaveChanges()
    {
        await SavePost(false);
    }
    
    private async Task SaveAndSubmit()
    {
        await SavePost(true);
    }
    
    private async Task SavePost(bool submit)
    {
        if (!_isValid || _post == null)
        {
            await _form!.Validate();
            return;
        }
        
        try
        {
            _isSaving = true;
            
            await PostService.UpdatePostAsync(_post.Id, _title, _slug, _content, CancellationToken.None);
            
            if (submit && _post.Status == PostStatus.Draft)
            {
                await PostService.SubmitPostAsync(_post.Id, CancellationToken.None);
                Snackbar.Add("Post updated and submitted for review", Severity.Success);
            }
            else
            {
                Snackbar.Add("Post updated successfully", Severity.Success);
            }
            
            NavigationManager.NavigateTo("/posts");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving post: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }
    
    private static Color GetStatusColor(PostStatus status) => status switch
    {
        PostStatus.Draft => Color.Default,
        PostStatus.Submitted => Color.Info,
        PostStatus.Approved => Color.Success,
        PostStatus.Published => Color.Primary,
        _ => Color.Default
    };
} 