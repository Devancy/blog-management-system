@page "/posts"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@using BlogManagementSystem.Application.DTOs
@using Microsoft.AspNetCore.Authorization
@using BlogManagementSystem.Application.Common.Security
@using Microsoft.AspNetCore.Components.Authorization
@using BlogManagementSystem.Presentation.Components.Common
@inject PostService PostService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Class="pa-4">
        <PageHeader Title="Blog Posts"/>

        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <AuthorizeView Roles="Admin,Author">
                    <Authorized>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Href="/posts/create">
                            Create Post
                        </MudButton>
                    </Authorized>
                </AuthorizeView>
            </MudItem>

            <MudItem xs="12">
                @if (_isLoading)
                {
                    <LoadingIndicator/>
                }
                else if (_posts == null || !_posts.Any())
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3 mb-3">No posts found.</MudAlert>
                }
                else
                {
                    <DataTable Items="@_filteredPosts"
                               Loading="@_isLoading"
                               FilterFunc="@FilterFunc"
                               SearchStringChanged="@((string s) => _searchString = s)"
                               NoRecordsText="No posts found."
                               TItem="PostDto">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Author</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Created</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="postItem">
                            <MudTd DataLabel="Title">
                                <MudLink Href="@($"/posts/{postItem.Slug}")">@postItem.Title</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Author">
                                @if (!string.IsNullOrEmpty(postItem.AuthorName))
                                {
                                    @postItem.AuthorName
                                }
                                else
                                {
                                    <span class="text-muted">Unknown</span>
                                }
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip T="string" Color="@GetStatusColor(postItem.Status)" Size="Size.Small">
                                    @postItem.Status.ToString()
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Created">@postItem.CreatedAt.ToLocalTime().ToString("g")</MudTd>
                            <MudTd>
                                <ActionButton IsIconButton="true"
                                              Icon="@Icons.Material.Filled.Visibility"
                                              Color="Color.Info"
                                              Href="@($"/posts/{postItem.Slug}")"
                                              Title="View" />

                                <AuthorizeView Roles="Admin,Author">
                                    <Authorized Context="authContext">
                                        @if (RolePermissions.CanEditPost(postItem, authContext.User))
                                        {
                                            <ActionButton IsIconButton="true"
                                                          Icon="@Icons.Material.Filled.Edit"
                                                          Color="Color.Primary"
                                                          Href="@($"/posts/edit/{postItem.Id}")"
                                                          Title="Edit" />

                                            <ActionButton IsIconButton="true"
                                                          Icon="@Icons.Material.Filled.Delete"
                                                          Color="Color.Error"
                                                          OnClick="@(() => DeletePost(postItem.Id))"
                                                          Title="Delete" />
                                            
                                            @if (postItem.Status == PostStatus.Draft)
                                            { 
                                                <ActionButton IsIconButton="true"
                                                              Icon="@Icons.Material.Filled.Send"
                                                              Color="Color.Success"
                                                              OnClick="@(() => SubmitPost(postItem.Id))"
                                                              Title="Submit for Review" />
                                            }
                                        }
                                    </Authorized>
                                </AuthorizeView>

                                <AuthorizeView Roles="Admin,Editor">
                                    <Authorized Context="editorContext">
                                        @if (postItem.Status == PostStatus.Submitted)
                                        {
                                            <ActionButton IsIconButton="true"
                                                          Icon="@Icons.Material.Filled.Check"
                                                          Color="Color.Success"
                                                          OnClick="@(() => ApprovePost(postItem.Id))"
                                                          Title="Approve" />
                                        }

                                        @if (postItem.Status == PostStatus.Approved)
                                        {
                                            <ActionButton IsIconButton="true"
                                                          Icon="@Icons.Material.Filled.Publish"
                                                          Color="Color.Secondary"
                                                          OnClick="@(() => PublishPost(postItem.Id))"
                                                          Title="Publish" />
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </MudTd>
                        </RowTemplate>
                    </DataTable>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<PostDto>? _posts;
    private List<PostDto> _filteredPosts = [];
    private bool _isLoading = true;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPostsAsync();
    }

    private async Task LoadPostsAsync()
    {
        try
        {
            _isLoading = true;
            _posts = await PostService.GetAllPostDtosAsync(CancellationToken.None);

            if (_posts != null)
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                _filteredPosts = _posts.Where(p => RolePermissions.IsPostVisibleToUser(p, user)).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading posts: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private bool FilterFunc(PostDto post)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return post.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               post.Content.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               post.AuthorName.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private Color GetStatusColor(PostStatus status) => status switch
    {
        PostStatus.Draft => Color.Default,
        PostStatus.Submitted => Color.Info,
        PostStatus.Approved => Color.Success,
        PostStatus.Published => Color.Primary,
        _ => Color.Default
    };

    private async Task SubmitPost(Guid id)
    {
        try
        {
            await PostService.SubmitPostAsync(id, CancellationToken.None);
            Snackbar.Add("Post submitted for review", Severity.Success);
            await LoadPostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting post: {ex.Message}", Severity.Error);
        }
    }

    private async Task ApprovePost(Guid id)
    {
        try
        {
            await PostService.ApprovePostAsync(id, CancellationToken.None);
            Snackbar.Add("Post approved", Severity.Success);
            await LoadPostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving post: {ex.Message}", Severity.Error);
        }
    }

    private async Task PublishPost(Guid id)
    {
        try
        {
            await PostService.PublishPostAsync(id, CancellationToken.None);
            Snackbar.Add("Post published", Severity.Success);
            await LoadPostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error publishing post: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeletePost(Guid id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Post",
            "Are you sure you want to delete this post?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                await PostService.DeletePostAsync(id, CancellationToken.None);
                Snackbar.Add("Post deleted", Severity.Success);
                await LoadPostsAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting post: {ex.Message}", Severity.Error);
            }
        }
    }

} 