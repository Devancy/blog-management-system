@page "/"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Blog Management System</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h3">Published Posts</MudText>
            
            <MudButton Href="/posts" Variant="Variant.Outlined" Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Dashboard">
                Manage Posts
            </MudButton>
        </MudItem>
        
        @if (loading)
        {
            <MudItem xs="12">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                <MudText Align="Align.Center" Class="mt-4">Loading published posts...</MudText>
            </MudItem>
        }
        else if (publishedPosts.Count == 0)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-8 mt-4" Elevation="0">
                    <MudText Typo="Typo.h5" Align="Align.Center">No published posts yet</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">
                        There are no published posts available. 
                        Please check back later or visit the management section to create and publish content.
                    </MudText>
                    <div class="d-flex justify-center mt-4">
                        <MudButton Href="/posts/create" Variant="Variant.Filled" Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Add">
                            Create a Post
                        </MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudDivider />
            </MudItem>
            
            @foreach (var post in publishedPosts)
            {
                <MudItem xs="12" md="6" lg="4" Class="pa-2">
                    <MudCard Elevation="2" Class="h-100 d-flex flex-column">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Class="mud-text-truncate">@post.Title</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Published on @post.UpdatedAt?.ToLocalTime().ToString("MMMM dd, yyyy") 
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="flex-grow-1">
                            @{
                                string truncatedContent = post.Content.Length > 200 
                                    ? post.Content.Substring(0, 200) + "..." 
                                    : post.Content;
                            }
                            <MudText Typo="Typo.body2">@truncatedContent</MudText>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-space-between">
                            <MudText Typo="Typo.caption">
                                <MudIcon Icon="@Icons.Material.Filled.Comment" Size="Size.Small" /> 
                                @post.Comments.Count comment(s)
                            </MudText>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                     Href="@($"/posts/details/{post.Id}")">
                                Read More
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
            
            <MudItem xs="12" Class="mt-4">
                <MudPagination Count="@pageCount" SelectedChanged="PageChanged" Variant="Variant.Outlined" 
                              Color="Color.Primary" Class="d-flex justify-center" />
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<Post> publishedPosts = new();
    private bool loading = true;
    private int pageSize = 9;
    private int pageCount = 1;
    private int currentPage = 1;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPublishedPostsAsync();
    }
    
    private async Task LoadPublishedPostsAsync()
    {
        try
        {
            loading = true;
            
            // Get all posts
            var allPosts = await PostService.GetAllPostsAsync(CancellationToken.None);
            
            // Filter to only published posts
            var allPublishedPosts = allPosts
                .Where(p => p.Status == PostStatus.Published)
                .OrderByDescending(p => p.UpdatedAt ?? p.CreatedAt)
                .ToList();
            
            // Calculate pagination
            pageCount = (int)Math.Ceiling(allPublishedPosts.Count / (double)pageSize);
            pageCount = pageCount == 0 ? 1 : pageCount;
            
            // Apply pagination
            publishedPosts = allPublishedPosts
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
            
            // Load comments for each post
            foreach (var post in publishedPosts)
            {
                try
                {
                    post.Comments = await PostService.GetCommentsAsync(post.Id, CancellationToken.None);
                }
                catch 
                {
                    // If comments can't be loaded, continue with empty collection
                    post.Comments = new List<Comment>();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading published posts: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task PageChanged(int page)
    {
        if (page != currentPage)
        {
            currentPage = page;
            await LoadPublishedPostsAsync();
        }
    }
}
