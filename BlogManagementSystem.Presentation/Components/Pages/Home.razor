@page "/"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@inject PostService PostService
@rendermode InteractiveServer

<PageTitle>Blog Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Your news feed</MudText>
    
    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else if (!_publishedPosts.Any())
    {
        <MudAlert Severity="Severity.Info" Class="mt-3 mb-3">No published posts available. Stay tuned!</MudAlert>
    }
    else
    {
        <MudGrid>
            @foreach (var post in _publishedPosts)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="3" Class="mb-4" Style="height: 100%;">
                        <MudCardHeader>
                            <MudText Typo="Typo.h5">
                                <MudLink Href="@($"/posts/{post.Slug}")">@post.Title</MudLink>
                            </MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2" Class="mt-3">
                                @GetPostSummary(post.Content)
                            </MudText>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-space-between">
                            <MudText Typo="Typo.caption">
                                Published: @(post.UpdatedAt?.ToLocalTime().ToString("MMM dd, yyyy") ?? post.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy"))
                            </MudText>
                            <MudButton Variant="Variant.Text" 
                                     Color="Color.Primary" 
                                     Href="@($"/posts/{post.Slug}")">
                                Read More
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private List<Post> _publishedPosts = [];
    private bool _isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPublishedPostsAsync();
    }
    
    private async Task LoadPublishedPostsAsync()
    {
        try
        {
            _isLoading = true;
            var allPosts = await PostService.GetAllPostsAsync(CancellationToken.None);
            _publishedPosts = allPosts
                .Where(p => p.Status == PostStatus.Published)
                .OrderByDescending(p => p.UpdatedAt ?? p.CreatedAt)
                .ToList();
        }
        catch (Exception)
        {
            // Handle error if needed
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private string GetPostSummary(string content)
    {
        // Create a short summary from the content (first 150 characters)
        if (string.IsNullOrEmpty(content))
            return string.Empty;
            
        var summary = content.Length <= 150 ? content : content.Substring(0, 147) + "...";
        return summary;
    }
}
