@page "/posts"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Posts</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" GutterBottom="true">Blog Posts</MudText>
        
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <AuthorizeView Roles="Admin,Author">
                    <Authorized>
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Add"
                                  Href="/posts/create">
                            Create Post
                        </MudButton>
                    </Authorized>
                </AuthorizeView>
            </MudItem>
            
            <MudItem xs="12">
                @if (_isLoading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else if (_posts == null || !_posts.Any())
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3 mb-3">No posts found.</MudAlert>
                }
                else
                {
                    <MudTable Items="@_filteredPosts" Hover="true" Striped="true" Filter="new Func<Post, bool>(FilterFunc)" Value="_selectedPost" ValueChanged="@((Post p) => _selectedPost = p)">
                        <ToolBarContent>
                            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" 
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Created</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="postItem">
                            <MudTd DataLabel="Title">
                                <MudLink Href="@($"/posts/{postItem.Slug}")">@postItem.Title</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip T="string" Color="@GetStatusColor(postItem.Status)" Size="Size.Small">
                                    @postItem.Status.ToString()
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Created">@postItem.CreatedAt.ToLocalTime().ToString("g")</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" 
                                               Href="@($"/posts/{postItem.Slug}")" />
                                
                                <AuthorizeView Roles="Admin,Author">
                                    <Authorized Context="authContext">
                                        @if (CanEdit(postItem, authContext.User))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" 
                                                          Href="@($"/posts/edit/{postItem.Id}")" />
                                            
                                            @if (postItem.Status == PostStatus.Draft)
                                            {
                                                <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Success" 
                                                              OnClick="@(() => SubmitPost(postItem.Id))" 
                                                              Title="Submit for Review" />
                                            }
                                            
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                                                          OnClick="@(() => DeletePost(postItem.Id))" />
                                        }
                                    </Authorized>
                                </AuthorizeView>
                                
                                <AuthorizeView Roles="Admin,Editor">
                                    <Authorized Context="editorContext">
                                        @if (postItem.Status == PostStatus.Submitted)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" 
                                                          OnClick="@(() => ApprovePost(postItem.Id))" 
                                                          Title="Approve" />
                                        }
                                        
                                        @if (postItem.Status == PostStatus.Approved)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Publish" Color="Color.Secondary" 
                                                          OnClick="@(() => PublishPost(postItem.Id))" 
                                                          Title="Publish" />
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50 }" />
                        </PagerContent>
                    </MudTable>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<Post>? _posts;
    private List<Post> _filteredPosts = new();
    private Post _selectedPost = new();
    private bool _isLoading = true;
    private string _searchString = "";
    private bool _isReader = false;
    private bool _isAdmin = false;
    private bool _isAuthor = false;
    private bool _isEditor = false;
    
    protected override async Task OnInitializedAsync()
    {
        await GetUserRolesAsync();
        await LoadPostsAsync();
    }
    
    private async Task GetUserRolesAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        _isReader = user.IsInRole("Reader");
        _isAdmin = user.IsInRole("Admin");
        _isAuthor = user.IsInRole("Author");
        _isEditor = user.IsInRole("Editor");
    }
    
    private async Task LoadPostsAsync()
    {
        try
        {
            _isLoading = true;
            _posts = await PostService.GetAllPostsAsync(CancellationToken.None);
            
            // Filter posts based on user role
            if (_posts != null)
            {
                if (_isReader && !_isAdmin && !_isAuthor && !_isEditor)
                {
                    // Readers can only see published/approved posts
                    _filteredPosts = _posts.Where(p => p.Status == PostStatus.Published || p.Status == PostStatus.Approved).ToList();
                }
                else
                {
                    // Admin, Author, and Editor can see all posts
                    _filteredPosts = _posts.ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading posts: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private bool FilterFunc(Post post)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
            
        return post.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               post.Content.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }
    
    private Color GetStatusColor(PostStatus status) => status switch
    {
        PostStatus.Draft => Color.Default,
        PostStatus.Submitted => Color.Info,
        PostStatus.Approved => Color.Success,
        PostStatus.Published => Color.Primary,
        _ => Color.Default
    };
    
    private bool CanEdit(Post post, ClaimsPrincipal user)
    {
        // Admin can edit any post
        if (user.IsInRole("Admin"))
            return true;
            
        // Author can only edit their own posts
        string userId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
        return post.AuthorId == userId;
    }
    
    private async Task SubmitPost(Guid id)
    {
        try
        {
            await PostService.SubmitPostAsync(id, CancellationToken.None);
            Snackbar.Add("Post submitted for review", Severity.Success);
            await LoadPostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting post: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ApprovePost(Guid id)
    {
        try
        {
            await PostService.ApprovePostAsync(id, CancellationToken.None);
            Snackbar.Add("Post approved", Severity.Success);
            await LoadPostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving post: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task PublishPost(Guid id)
    {
        try
        {
            await PostService.PublishPostAsync(id, CancellationToken.None);
            Snackbar.Add("Post published", Severity.Success);
            await LoadPostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error publishing post: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task DeletePost(Guid id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Post",
            "Are you sure you want to delete this post?",
            yesText: "Delete", cancelText: "Cancel");
            
        if (result == true)
        {
            try
            {
                await PostService.DeletePostAsync(id, CancellationToken.None);
                Snackbar.Add("Post deleted", Severity.Success);
                await LoadPostsAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting post: {ex.Message}", Severity.Error);
            }
        }
    }
} 