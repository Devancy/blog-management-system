@page "/posts/{Slug}"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Post Details</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
    }
    else if (_post == null)
    {
        <MudAlert Severity="Severity.Error">Post not found.</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoBack" Class="mt-4">Back to Posts</MudButton>
    }
    else
    {
        <MudPaper Class="pa-4 mb-4">
            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-space-between align-center">
                    <div>
                        <MudText Typo="Typo.h4">@_post.Title</MudText>
                        <MudText Typo="Typo.subtitle1" Class="mt-1 mb-3">
                            Created: @_post.CreatedAt.ToLocalTime().ToString("f")
                            @if (_post.UpdatedAt.HasValue)
                            {
                                <span> | Updated: @_post.UpdatedAt.Value.ToLocalTime().ToString("f")</span>
                            }
                        </MudText>
                        <MudChip T="string" Color="@GetStatusColor(_post.Status)" Size="Size.Small" Class="mb-4">@_post.Status.ToString()</MudChip>
                    </div>
                    <div>
                        <MudTooltip Text="Back to Posts">
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" OnClick="GoBack" />
                        </MudTooltip>
                        
                        <AuthorizeView Roles="Admin,Author">
                            <Authorized Context="AuthContext">
                                @if (CanEdit(_post, AuthContext.User))
                                {
                                    <MudTooltip Text="Edit Post">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" 
                                                      Href="@($"/posts/edit/{_post.Id}")" />
                                    </MudTooltip>
                                    
                                    @if (_post.Status == PostStatus.Draft)
                                    {
                                        <MudTooltip Text="Submit for Review">
                                            <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Success" 
                                                          OnClick="SubmitPost" />
                                        </MudTooltip>
                                    }
                                }
                            </Authorized>
                        </AuthorizeView>
                        
                        <AuthorizeView Roles="Admin,Editor">
                            <Authorized>
                                @if (_post.Status == PostStatus.Submitted)
                                {
                                    <MudTooltip Text="Approve">
                                        <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" 
                                                      OnClick="ApprovePost" />
                                    </MudTooltip>
                                }
                                
                                @if (_post.Status == PostStatus.Approved)
                                {
                                    <MudTooltip Text="Publish">
                                        <MudIconButton Icon="@Icons.Material.Filled.Publish" Color="Color.Secondary" 
                                                      OnClick="PublishPost" />
                                    </MudTooltip>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </MudItem>
                
                <MudItem xs="12">
                    <div class="post-content mud-typography-body1 pa-2">
                        @((MarkupString)ProcessContent(_post.Content))
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <MudDivider Class="my-4" />
        
        <MudText Typo="Typo.h5" Class="mb-4">Comments (@_comments.Count)</MudText>
        
        <MudPaper Class="pa-4 mb-4">
            <MudTextField @bind-Value="_newComment" Label="Add a comment" 
                        Lines="3" Counter="1000" MaxLength="1000" 
                        Class="mb-2" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                     OnClick="AddComment"
                     Disabled="@(string.IsNullOrWhiteSpace(_newComment) || _isAddingComment)">
                Add Comment
            </MudButton>
            
            @if (_isAddingComment)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2" />
            }
        </MudPaper>
        
        @if (!_comments.Any())
        {
            <MudAlert Severity="Severity.Info">No comments yet. Be the first to comment!</MudAlert>
        }
        else
        {
            <MudList T="Comment" Clickable="false" Dense="false" DisablePadding="true">
                @foreach (var comment in _comments.OrderByDescending(c => c.CreatedAt))
                {
                    <MudListItem T="Comment" Class="pa-0">
                        <MudPaper Class="pa-3 mb-2" Elevation="2">
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.subtitle2">
                                    User: @comment.UserId.Substring(0, Math.Min(8, comment.UserId.Length))...
                                </MudText>
                                <MudText Typo="Typo.caption">
                                    @comment.CreatedAt.ToLocalTime().ToString("g")
                                </MudText>
                            </div>
                            <MudText Typo="Typo.body2" Class="mt-2">@comment.Content</MudText>
                            
                            @if (_currentUserId == comment.UserId || _isAdmin)
                            {
                                <div class="d-flex justify-end mt-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                Size="Size.Small" 
                                                Color="Color.Error" 
                                                OnClick="@(() => DeleteComment(comment.Id))" />
                                </div>
                            }
                        </MudPaper>
                    </MudListItem>
                }
            </MudList>
        }
    }
</MudContainer>

@code {
    [Parameter]
    public string Slug { get; set; } = string.Empty;
    
    private Post? _post;
    private List<Comment> _comments = new();
    private string _newComment = string.Empty;
    private bool _isLoading = true;
    private bool _isAddingComment;
    private string _currentUserId = string.Empty;
    private bool _isAdmin;
    
    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserInfoAsync();
        await LoadPostAsync();
    }
    
    private async Task GetCurrentUserInfoAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
        _isAdmin = user.IsInRole("Admin");
    }
    
    private async Task LoadPostAsync()
    {
        try
        {
            _isLoading = true;
            
            // Load post by slug
            _post = await PostService.GetPostBySlugAsync(Slug, CancellationToken.None);
            
            if (_post != null)
            {
                // Load comments
                _comments = await PostService.GetCommentsAsync(_post.Id, CancellationToken.None);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading post: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("/posts");
    }
    
    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(_newComment) || _post == null)
            return;
            
        try
        {
            _isAddingComment = true;
            
            // Add new comment
            await PostService.AddCommentAsync(_post.Id, _currentUserId, _newComment, CancellationToken.None);
            
            // Reset comment field
            _newComment = string.Empty;
            
            // Reload comments
            _comments = await PostService.GetCommentsAsync(_post.Id, CancellationToken.None);
            
            Snackbar.Add("Comment added successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding comment: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isAddingComment = false;
        }
    }
    
    private async Task DeleteComment(Guid commentId)
    {
        try
        {
            await PostService.DeleteCommentAsync(commentId, CancellationToken.None);
            
            // Remove from local list 
            _comments.RemoveAll(c => c.Id == commentId);
            
            Snackbar.Add("Comment deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting comment: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task SubmitPost()
    {
        try
        {
            if (_post != null)
            {
                await PostService.SubmitPostAsync(_post.Id, CancellationToken.None);
                
                // Update local state
                _post.Status = PostStatus.Submitted;
                _post.UpdatedAt = DateTime.UtcNow;
                
                Snackbar.Add("Post submitted for review", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting post: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ApprovePost()
    {
        try
        {
            if (_post != null)
            {
                await PostService.ApprovePostAsync(_post.Id, CancellationToken.None);
                
                // Update local state
                _post.Status = PostStatus.Approved;
                _post.UpdatedAt = DateTime.UtcNow;
                
                Snackbar.Add("Post approved", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving post: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task PublishPost()
    {
        try
        {
            if (_post != null)
            {
                await PostService.PublishPostAsync(_post.Id, CancellationToken.None);
                
                // Update local state
                _post.Status = PostStatus.Published;
                _post.UpdatedAt = DateTime.UtcNow;
                
                Snackbar.Add("Post published", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error publishing post: {ex.Message}", Severity.Error);
        }
    }
    
    private Color GetStatusColor(PostStatus status) => status switch
    {
        PostStatus.Draft => Color.Default,
        PostStatus.Submitted => Color.Info,
        PostStatus.Approved => Color.Success,
        PostStatus.Published => Color.Primary,
        _ => Color.Default
    };
    
    private bool CanEdit(Post post, ClaimsPrincipal user)
    {
        // Admin can edit any post
        if (user.IsInRole("Admin"))
            return true;
            
        // Author can only edit their own posts
        string userId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
        return post.AuthorId == userId;
    }
    
    private string ProcessContent(string content)
    {
        // Convert line breaks to HTML
        return content.Replace(Environment.NewLine, "<br />").Replace("\n", "<br />");
    }
} 