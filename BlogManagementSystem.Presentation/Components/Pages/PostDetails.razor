@page "/posts/details/{Id:guid}"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@using BlogManagementSystem.Presentation.Components
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using System.Text.RegularExpressions

<PageTitle>Post Details</PageTitle>

<MudContainer Class="mt-4">
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    else if (post == null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">Post not found</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/posts">Back to Posts</MudButton>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudGrid>
                        <MudItem xs="12" Class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.h4">@post.Title</MudText>
                            <div>
                                <MudChip Color="@GetStatusColor(post.Status)" Size="Size.Small" T="string">
                                    @post.Status.ToString()
                                </MudChip>
                            </div>
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudDivider Class="mb-4" />
                        </MudItem>
                        
                        <MudItem xs="12">
                            @if (string.IsNullOrWhiteSpace(post.Content))
                            {
                                <MudAlert Severity="Severity.Info" Class="mb-3">This post has no content.</MudAlert>
                            }
                            else
                            {
                                <MudText Typo="Typo.body1" Class="mb-4">
                                    @* @((MarkupString)FormatMarkdown(post.Content)) *@
                                    <MudMarkdown Value="@post.Content" />
                                </MudText>
                            }
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.subtitle2">Created: @post.CreatedAt.ToLocalTime().ToString("g")</MudText>
                        </MudItem>
                        
                        <MudItem xs="12" md="6" Class="d-flex justify-end">
                            <MudText Typo="Typo.subtitle2">
                                Last Updated: @(post.UpdatedAt.HasValue ? post.UpdatedAt.Value.ToLocalTime().ToString("g") : "-")
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" Class="d-flex gap-2 mt-4">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/posts">
                    Back to Posts
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                           OnClick="@(() => NavigationManager.NavigateTo($"/posts/edit/{Id}"))">
                    Edit Post
                </MudButton>
                
                @if (post.Status == PostStatus.Draft)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Info" 
                              OnClick="@(() => ConfirmStatusChange(post, PostStatus.Submitted))">
                        Submit for Approval
                    </MudButton>
                }
                @if (post.Status == PostStatus.Submitted)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" 
                              OnClick="@(() => ConfirmStatusChange(post, PostStatus.Approved))">
                        Approve
                    </MudButton>
                }
                @if (post.Status == PostStatus.Approved)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" 
                              OnClick="@(() => ConfirmStatusChange(post, PostStatus.Published))">
                        Publish
                    </MudButton>
                }
            </MudItem>
            
            <MudItem xs="12" Class="mt-6">
                <MudText Typo="Typo.h5">Comments (@(post.Comments.Count))</MudText>
                
                <MudExpansionPanels Class="mt-4">
                    <MudExpansionPanel IsInitiallyExpanded="true">
                        <TitleContent>
                            <MudText Typo="Typo.h6">Add a Comment</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudTextField @bind-Value="newComment" Label="Your comment" 
                                         Variant="Variant.Outlined" Lines="3" Class="mt-2" />
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                      OnClick="AddCommentAsync" Class="mt-3">
                                Post Comment
                            </MudButton>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
                
                @if (post.Comments.Count == 0)
                {
                    <MudAlert Severity="Severity.Info" Class="mt-4">No comments yet. Be the first to comment!</MudAlert>
                }
                else
                {
                    <MudList T="Comment" Class="mt-4">
                        @foreach (var comment in post.Comments.OrderByDescending(c => c.CreatedAt))
                        {
                            <MudListItem T="Comment">
                                <MudCard Elevation="0" Class="mb-4">
                                    <MudCardContent>
                                        <MudText Typo="Typo.body1">@comment.Content</MudText>
                                        <MudText Typo="Typo.caption" Class="mt-2">
                                            Posted on @comment.CreatedAt.ToLocalTime().ToString("g")
                                        </MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                     Color="Color.Error" 
                                                     OnClick="@(() => ConfirmDeleteComment(comment))"
                                                     Size="Size.Small" />
                                    </MudCardActions>
                                </MudCard>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private Post? post;
    private bool loading = true;
    private string newComment = "";
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPostAsync();
    }
    
    private async Task LoadPostAsync()
    {
        try
        {
            loading = true;
            post = await PostService.GetPostAsync(Id, CancellationToken.None);
            
            if (post != null)
            {
                // Load comments for this post
                post.Comments = await PostService.GetCommentsAsync(Id, CancellationToken.None);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading post: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }
    
    private string FormatMarkdown(string markdown)
    {
        if (string.IsNullOrWhiteSpace(markdown))
            return string.Empty;

        // Simple formatting for demonstration purposes
        var text = markdown;
        
        // Bold text
        text = Regex.Replace(text, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        
        // Italic text
        text = Regex.Replace(text, @"\*(.*?)\*", "<em>$1</em>");
        
        // Headers
        text = Regex.Replace(text, @"^# (.*?)$", "<h1>$1</h1>", RegexOptions.Multiline);
        text = Regex.Replace(text, @"^## (.*?)$", "<h2>$1</h2>", RegexOptions.Multiline);
        text = Regex.Replace(text, @"^### (.*?)$", "<h3>$1</h3>", RegexOptions.Multiline);
        
        // Lists
        text = Regex.Replace(text, @"^- (.*?)$", "<li>$1</li>", RegexOptions.Multiline);
        text = text.Replace("<li>", "<ul><li>").Replace("</li>", "</li></ul>");
        text = text.Replace("</ul><ul>", "");
        
        // Links
        text = Regex.Replace(text, @"\[(.*?)\]\((.*?)\)", "<a href=\"$2\" target=\"_blank\">$1</a>");
        
        // Line breaks
        text = text.Replace("\n\n", "<br /><br />");
        
        return text;
    }
    
    private async Task AddCommentAsync()
    {
        if (string.IsNullOrWhiteSpace(newComment))
        {
            Snackbar.Add("Comment cannot be empty", Severity.Warning);
            return;
        }
        
        try
        {
            // In a real app, get the real user ID from authentication system
            string userId = "demo-user";
            await PostService.AddCommentAsync(Id, userId, newComment, CancellationToken.None);
            
            Snackbar.Add("Comment added successfully", Severity.Success);
            newComment = "";
            
            // Reload the post to get updated comments
            await LoadPostAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding comment: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ConfirmDeleteComment(Comment comment)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment? This action cannot be undone.");
        
        if (confirmed)
        {
            await DeleteCommentAsync(comment);
        }
    }
    
    private async Task DeleteCommentAsync(Comment comment)
    {
        try
        {
            await PostService.DeleteCommentAsync(comment.Id, CancellationToken.None);
            Snackbar.Add("Comment deleted successfully", Severity.Success);
            await LoadPostAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting comment: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ConfirmStatusChange(Post post, PostStatus status)
    {
        string statusAction = status switch
        {
            PostStatus.Submitted => "submit",
            PostStatus.Approved => "approve",
            PostStatus.Published => "publish",
            _ => "change status of"
        };
        
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to {statusAction} this post?");
        
        if (confirmed)
        {
            await ChangePostStatusAsync(status);
        }
    }
    
    private async Task ChangePostStatusAsync(PostStatus status)
    {
        try
        {
            switch (status)
            {
                case PostStatus.Submitted:
                    await PostService.SubmitPostAsync(Id, CancellationToken.None);
                    break;
                case PostStatus.Approved:
                    await PostService.ApprovePostAsync(Id, CancellationToken.None);
                    break;
                case PostStatus.Published:
                    await PostService.PublishPostAsync(Id, CancellationToken.None);
                    break;
            }
            
            Snackbar.Add($"Post status updated to {status}", Severity.Success);
            await LoadPostAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating post status: {ex.Message}", Severity.Error);
        }
    }
    
    private Color GetStatusColor(PostStatus status) => status switch
    {
        PostStatus.Draft => Color.Default,
        PostStatus.Submitted => Color.Info,
        PostStatus.Approved => Color.Warning,
        PostStatus.Published => Color.Success,
        _ => Color.Default
    };
} 
