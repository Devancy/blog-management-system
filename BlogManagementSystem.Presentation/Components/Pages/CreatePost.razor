@page "/posts/create"
@using BlogManagementSystem.Domain.Entities
@using BlogManagementSystem.Application.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize(Roles = "Admin,Author")]
@rendermode InteractiveServer

<PageTitle>Create Post</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" GutterBottom="true">Create New Post</MudText>
        
        <MudForm @ref="_form" @bind-IsValid="_isValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_title" Label="Title" 
                                Required="true" RequiredError="Title is required"
                                Counter="200" MaxLength="200" 
                                OnBlur="@(_ => GenerateSlug(_title))" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="_slug" Label="Slug" 
                                Required="true" RequiredError="Slug is required"
                                Counter="200" MaxLength="200"
                                HelperText="URL-friendly name (auto-generated from title)" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="_content" Label="Content" 
                                Required="true" RequiredError="Content is required"
                                Lines="15" Counter="50000" MaxLength="50000" />
                </MudItem>
                
                <MudItem xs="12" Class="d-flex justify-space-between">
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                              OnClick="GoBack">Cancel</MudButton>
                    
                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                 OnClick="SaveDraft" Class="mr-2"
                                 Disabled="@(!_isValid || _isSaving)">
                            Save Draft
                        </MudButton>
                        
                        <MudButton Variant="Variant.Filled" Color="Color.Success" 
                                 OnClick="SaveAndSubmit"
                                 Disabled="@(!_isValid || _isSaving)">
                            Save & Submit
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudForm>
        
        @if (_isSaving)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-3" />
        }
    </MudPaper>
</MudContainer>

@code {
    private string _title = string.Empty;
    private string _slug = string.Empty;
    private string _content = string.Empty;
    private bool _isValid;
    private bool _isSaving;
    private MudForm? _form;
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("/posts");
    }
    
    private void GenerateSlug(string title)
    {
        if (string.IsNullOrEmpty(title))
        {
            _slug = string.Empty;
            return;
        }
        
        // Convert to lowercase
        string slug = title.ToLowerInvariant();
        
        // Replace spaces with hyphens
        slug = slug.Replace(" ", "-");
        
        // Remove special characters
        slug = System.Text.RegularExpressions.Regex.Replace(slug, @"[^a-z0-9\-]", "");
        
        // Remove multiple hyphens
        slug = System.Text.RegularExpressions.Regex.Replace(slug, @"-+", "-");
        
        // Trim hyphens from start and end
        slug = slug.Trim('-');
        
        _slug = slug;
    }
    
    private async Task SaveDraft()
    {
        await SavePost(false);
    }
    
    private async Task SaveAndSubmit()
    {
        await SavePost(true);
    }
    
    private async Task SavePost(bool submit)
    {
        if (!_isValid)
        {
            await _form!.Validate();
            return;
        }
        
        try
        {
            _isSaving = true;
            
            // Get current user ID
            var userId = await GetCurrentUserId();
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("Unable to determine current user", Severity.Error);
                return;
            }
            
            // Create the post
            var post = await PostService.CreatePostAsync(_title, _slug, _content, userId, CancellationToken.None);
            
            // Submit if requested
            if (submit && post != null)
            {
                await PostService.SubmitPostAsync(post.Id, CancellationToken.None);
            }
            
            Snackbar.Add(submit ? "Post created and submitted for review" : "Draft saved", Severity.Success);
            NavigationManager.NavigateTo("/posts");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving post: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }
    
    private async Task<string> GetCurrentUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
    }
} 