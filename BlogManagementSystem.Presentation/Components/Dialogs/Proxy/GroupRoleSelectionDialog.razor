@using BlogManagementSystem.Application.DTOs
@using BlogManagementSystem.Application.Interfaces
@inject IIdentityManagerFactory IdentityManagerFactory
@inject MudBlazor.ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText>@ContentText</MudText>
        
        @if (_loading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-4" />
        }
        else
        {
            <MudTextField @bind-Value="_searchString" 
                         Placeholder="Search Roles" 
                         Adornment="Adornment.Start" 
                         AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" 
                         Class="my-4" />
                         
            <div style="max-height: 400px; overflow-y: auto;">
                <MudList T="RoleDto" Dense="true" Clickable="true">
                    @foreach (var role in FilteredRoles)
                    {
                        <MudListItem T="RoleDto">
                            <div class="d-flex align-center justify-space-between w-100">
                                <div>
                                    <MudText Typo="Typo.body1">@role.Name</MudText>
                                    <MudText Typo="Typo.caption">@role.Description</MudText>
                                </div>
                                <MudCheckBox T="bool" 
                                           @bind-Value="@SelectedRoles[role.Id ?? ""]" />
                            </div>
                        </MudListItem>
                    }
                </MudList>
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public string ContentText { get; set; } = "Select roles to assign to the group:";
    [Parameter] public string ButtonText { get; set; } = "Assign";
    [Parameter] public string GroupId { get; set; } = string.Empty;
    
    private List<RoleDto> _allRoles = [];
    private Dictionary<string, bool> SelectedRoles { get; set; } = new();
    private string _searchString = "";
    private bool _loading = true;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
        
        if (!string.IsNullOrEmpty(GroupId))
        {
            await LoadGroupRolesAsync(GroupId);
        }
    }
    
    private async Task LoadRolesAsync()
    {
        try
        {
            _loading = true;
            var roles = await IdentityManagerFactory.CurrentManager.GetRolesAsync();
            _allRoles = roles.Where(r => r.Id != null).ToList();
            
            // Initialize the dictionary for all roles
            foreach (var role in _allRoles)
            {
                if (role.Id != null)
                {
                    SelectedRoles[role.Id] = false;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading roles: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task LoadGroupRolesAsync(string groupId)
    {
        try
        {
            var groupRoles = await IdentityManagerFactory.CurrentManager.GetGroupRolesAsync(groupId);
            
            // Update selected status in the dictionary
            foreach (var role in groupRoles)
            {
                if (role.Id != null)
                {
                    SelectedRoles[role.Id] = true;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading group roles: {ex.Message}", Severity.Error);
        }
    }
    
    private IEnumerable<RoleDto> FilteredRoles => _allRoles
        .Where(r => string.IsNullOrEmpty(_searchString) ||
                 (r.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                 (r.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false))
        .OrderBy(r => r.Name);
    
    private void Submit()
    {
        var selectedRoleIds = SelectedRoles
            .Where(kvp => kvp.Value)
            .Select(kvp => kvp.Key)
            .ToList();
            
        MudDialog.Close(DialogResult.Ok(selectedRoleIds));
    }
    
    private void Cancel() => MudDialog.Cancel();
} 