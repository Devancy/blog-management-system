@using BlogManagementSystem.Application.DTOs
@using BlogManagementSystem.Application.Interfaces
@inject IIdentityManagerFactory IdentityManagerFactory
@inject ISnackbar Snackbar

<MudDialog MaxWidth="MaxWidth.ExtraLarge" FullWidth="true">
    <DialogContent>
        <MudText Typo="Typo.body1" Class="mb-4">
            @ContentText
        </MudText>
        
        @if (_loading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-4" />
        }
        else
        {
            <MudTextField @bind-Value="_searchString" 
                         Placeholder="Search Groups" 
                         Adornment="Adornment.Start" 
                         AdornmentIcon="@Icons.Material.Filled.Search" 
                         IconSize="Size.Medium" 
                         Class="mb-4" />
                         
            <MudPaper Elevation="0" Class="py-4 px-1">
                <MudGrid Spacing="2">
                    @foreach (var group in FilteredGroups)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Elevation="0" Class="pa-2 mb-2 border-1 border-solid rounded-lg">
                                <MudCheckBox T="bool" 
                                          @bind-Value="@SelectedGroups[group.Id ?? ""]" 
                                          Color="Color.Primary" 
                                          Label="@group.Name" 
                                          LabelPlacement="Placement.End" />
                                <MudText Typo="Typo.caption" Class="ml-8 mb-2 d-block text-truncate" Style="max-width: 95%;" 
                                         Title="@(group.Path ?? "Unknown path")">
                                    Path: @(group.Path ?? "Unknown path")
                                </MudText>
                                
                                @if (group.SubGroups != null && group.SubGroups.Any())
                                {
                                    <MudGrid Spacing="2" Class="ml-8 mt-1">
                                        @foreach (var subGroup in group.SubGroups.Where(FilterGroup))
                                        {
                                            <MudItem xs="12" sm="12" md="12">
                                                <MudCard Elevation="0" Class="pa-2 mb-2 border-1 border-solid rounded-lg">
                                                    <MudCheckBox T="bool" 
                                                              @bind-Value="@SelectedGroups[subGroup.Id ?? ""]" 
                                                              Color="Color.Primary" 
                                                              Label="@subGroup.Name" 
                                                              LabelPlacement="Placement.End" />
                                                    <MudText Typo="Typo.caption" Class="ml-8 mb-2 d-block text-truncate" Style="max-width: 95%;" 
                                                             Title="@(subGroup.Path ?? "Unknown path")">
                                                        Path: @(subGroup.Path ?? "Unknown path")
                                                    </MudText>
                                                    
                                                    @if (subGroup.SubGroups != null && subGroup.SubGroups.Any())
                                                    {
                                                        <MudGrid Spacing="1" Class="ml-8 mt-1">
                                                            @foreach (var subSubGroup in subGroup.SubGroups.Where(FilterGroup))
                                                            {
                                                                <MudItem xs="12">
                                                                    <div class="d-flex align-center border-1 border-solid rounded-lg pa-2">
                                                                        <MudCheckBox T="bool" 
                                                                                  @bind-Value="@SelectedGroups[subSubGroup.Id ?? ""]" 
                                                                                  Color="Color.Primary" 
                                                                                  Label="@subSubGroup.Name" 
                                                                                  LabelPlacement="Placement.End" />
                                                                    </div>
                                                                </MudItem>
                                                            }
                                                        </MudGrid>
                                                    }
                                                </MudCard>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                }
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public string ContentText { get; set; } = "Select groups:";
    [Parameter] public string ButtonText { get; set; } = "Assign";
    [Parameter] public List<string> SelectedUserIds { get; set; } = [];
    
    private List<GroupDto> _allGroups = [];
    private Dictionary<string, bool> SelectedGroups { get; set; } = new();
    private string _searchString = "";
    private bool _loading = true;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGroupsAsync();
        
        if (SelectedUserIds.Count == 1)
        {
            await LoadUserGroupsAsync(SelectedUserIds[0]);
        }
    }
    
    private async Task LoadGroupsAsync()
    {
        try
        {
            _loading = true;
            var groups = await IdentityManagerFactory.CurrentManager.GetGroupsAsync();
            _allGroups = FlattenGroups(groups.Where(g => g.Id != null));
            
            // Initialize the dictionary for all groups
            foreach (var group in _allGroups)
            {
                if (group.Id != null)
                {
                    SelectedGroups[group.Id] = false;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading groups: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task LoadUserGroupsAsync(string userId)
    {
        try
        {
            var userGroups = await IdentityManagerFactory.CurrentManager.GetUserGroupsAsync(userId);
            
            // Update selected status in the dictionary
            foreach (var groupId in userGroups)
            {
                if (!string.IsNullOrEmpty(groupId))
                {
                    SelectedGroups[groupId] = true;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading user groups: {ex.Message}", Severity.Error);
        }
    }
    
    private List<GroupDto> FilteredGroups => _allGroups
        .Where(g => g.ParentGroupId == null && FilterGroup(g))
        .ToList();
        
    private bool FilterGroup(GroupDto group)
    {
        if (string.IsNullOrEmpty(_searchString))
            return true;
            
        bool currentMatches = (group.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                             (group.Path?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
        
        bool anySubgroupMatches = false;
        if (group.SubGroups != null && group.SubGroups.Any())
        {
            anySubgroupMatches = group.SubGroups.Any(g => FilterGroup(g));
        }
        
        return currentMatches || anySubgroupMatches;
    }
    
    private List<GroupDto> FlattenGroups(IEnumerable<GroupDto> groups)
    {
        var result = new List<GroupDto>();
        foreach (var group in groups)
        {
            result.Add(group);
            
            if (group.SubGroups != null && group.SubGroups.Any())
            {
                result.AddRange(FlattenGroups(group.SubGroups));
            }
        }
        
        return result;
    }
    
    private void Submit()
    {
        var selectedGroupIds = SelectedGroups
            .Where(kvp => kvp.Value)
            .Select(kvp => kvp.Key)
            .ToList();
            
        MudDialog.Close(DialogResult.Ok(selectedGroupIds));
    }
    
    private void Cancel() => MudDialog.Cancel();
} 