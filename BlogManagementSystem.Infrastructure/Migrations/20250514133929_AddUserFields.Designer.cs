// <auto-generated />
using System;
using BlogManagementSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlogManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250514133929_AddUserFields")]
    partial class AddUserFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_comments_post_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_group_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("path");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_local_groups");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_local_groups_name");

                    b.HasIndex("ParentGroupId")
                        .HasDatabaseName("ix_local_groups_parent_group_id");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasDatabaseName("ix_local_groups_path");

                    b.ToTable("local_groups", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalGroupRole", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("GroupId", "RoleId")
                        .HasName("pk_local_group_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_local_group_roles_role_id");

                    b.ToTable("local_group_roles", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_local_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_local_roles_name");

                    b.ToTable("local_roles", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("UserId", "GroupId")
                        .HasName("pk_local_user_groups");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_local_user_groups_group_id");

                    b.ToTable("local_user_groups", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalUserIdentity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organization");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("pk_local_user_identities");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_local_user_identities_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_local_user_identities_username");

                    b.ToTable("local_user_identities", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_local_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_local_user_roles_role_id");

                    b.ToTable("local_user_roles", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_posts_slug");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BlogManagementSystem.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_posts_post_id");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalGroup", b =>
                {
                    b.HasOne("BlogManagementSystem.Domain.Entities.LocalGroup", "ParentGroup")
                        .WithMany("SubGroups")
                        .HasForeignKey("ParentGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_local_groups_local_groups_parent_group_id");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalGroupRole", b =>
                {
                    b.HasOne("BlogManagementSystem.Domain.Entities.LocalGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_local_group_roles_local_groups_group_id");

                    b.HasOne("BlogManagementSystem.Domain.Entities.LocalRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_local_group_roles_local_roles_role_id");

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalUserGroup", b =>
                {
                    b.HasOne("BlogManagementSystem.Domain.Entities.LocalGroup", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_local_user_groups_local_groups_group_id");

                    b.HasOne("BlogManagementSystem.Domain.Entities.LocalUserIdentity", "UserIdentity")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_local_user_groups_local_user_identities_user_id");

                    b.Navigation("Group");

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalUserRole", b =>
                {
                    b.HasOne("BlogManagementSystem.Domain.Entities.LocalRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_local_user_roles_local_roles_role_id");

                    b.HasOne("BlogManagementSystem.Domain.Entities.LocalUserIdentity", "UserIdentity")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_local_user_roles_local_user_identities_user_id");

                    b.Navigation("Role");

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalGroup", b =>
                {
                    b.Navigation("SubGroups");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.LocalUserIdentity", b =>
                {
                    b.Navigation("UserGroups");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BlogManagementSystem.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
